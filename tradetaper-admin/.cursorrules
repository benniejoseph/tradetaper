# TradeTaper Admin Dashboard Cursor Rules

## Project Overview
Next.js 15 admin dashboard for TradeTaper platform with real-time analytics, user management, system monitoring, and comprehensive data visualization.

## Technology Stack
- **Framework**: Next.js 15.3 with App Router and React 19
- **State Management**: TanStack Query 5.80 for server state
- **Styling**: Tailwind CSS 4.0 with PostCSS
- **UI Components**: Headless UI 2.2 + custom components
- **Charts**: Recharts 2.15 for analytics and data visualization
- **Maps**: React Leaflet 5.0 with Leaflet 1.9
- **Virtualization**: React Window 1.8 for large datasets
- **HTTP Client**: Axios 1.9
- **WebSockets**: Socket.IO Client 4.8
- **Animations**: Framer Motion 12.16
- **Utilities**: class-variance-authority, clsx, tailwind-merge

## Architecture Patterns

### Admin App Structure
```
src/
├── app/                    # Next.js App Router
│   ├── (dashboard)/       # Main dashboard routes
│   ├── login/             # Admin authentication
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Dashboard home
├── components/            # Admin UI components
│   ├── ui/               # Base UI components (buttons, inputs)
│   ├── dashboard/        # Dashboard-specific components
│   ├── charts/           # Chart and visualization components
│   ├── tables/           # Data table components
│   └── modals/           # Modal components
├── lib/                  # Utilities and configurations
│   ├── api.ts           # API client configuration
│   ├── utils.ts         # Utility functions
│   └── validations.ts   # Form validation schemas
├── hooks/                # Custom React hooks
│   ├── useAuth.ts       # Admin authentication hook
│   ├── useWebSocket.ts  # Real-time data hook
│   └── useFilters.ts    # Data filtering hook
└── types/                # TypeScript definitions
```

### Core Principles
- **Admin-First Design**: Optimize for admin workflows and efficiency
- **Real-time Data**: Live updates for system monitoring and user activity
- **Data-Heavy UI**: Handle large datasets with virtualization and pagination
- **Role-Based Access**: Implement granular permission controls
- **Audit Logging**: Track all admin actions for compliance
- **Performance**: Fast loading and smooth interactions with large data

## Component Architecture

### Base UI Components
```typescript
// components/ui/Button.tsx
import { cva, type VariantProps } from 'class-variance-authority';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
  {
    variants: {
      variant: {
        default: 'bg-blue-600 text-white hover:bg-blue-700',
        destructive: 'bg-red-600 text-white hover:bg-red-700',
        outline: 'border border-gray-300 bg-white hover:bg-gray-50',
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4',
        lg: 'h-12 px-6',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
    },
  }
);

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  VariantProps<typeof buttonVariants> {}

export function Button({ className, variant, size, ...props }: ButtonProps) {
  return (
    <button
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}
```

### Data Table Components
```typescript
// components/tables/DataTable.tsx
import { FixedSizeList as List } from 'react-window';

interface DataTableProps<T> {
  data: T[];
  columns: Column<T>[];
  onRowClick?: (item: T) => void;
  isLoading?: boolean;
  height?: number;
}

export function DataTable<T>({ 
  data, 
  columns, 
  onRowClick, 
  isLoading,
  height = 400 
}: DataTableProps<T>) {
  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => (
    <div style={style} className="flex items-center border-b">
      {columns.map((column) => (
        <div key={column.key} className={column.className}>
          {column.render ? column.render(data[index]) : data[index][column.key]}
        </div>
      ))}
    </div>
  );

  if (isLoading) {
    return <TableSkeleton />;
  }

  return (
    <div className="border rounded-lg">
      <List
        height={height}
        itemCount={data.length}
        itemSize={50}
        width="100%"
      >
        {Row}
      </List>
    </div>
  );
}
```

## TanStack Query Integration

### Query Configuration
```typescript
// lib/queryClient.ts
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      retry: (failureCount, error) => {
        if (error.status === 401 || error.status === 403) {
          return false; // Don't retry auth errors
        }
        return failureCount < 3;
      },
    },
  },
});
```

### Data Fetching Hooks
```typescript
// hooks/useUsers.ts
export function useUsers(filters: UserFilters = {}) {
  return useQuery({
    queryKey: ['users', filters],
    queryFn: () => adminApi.getUsers(filters),
    keepPreviousData: true,
  });
}

export function useUserMutation() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: adminApi.updateUser,
    onSuccess: (updatedUser) => {
      // Update the users list cache
      queryClient.setQueryData(['users'], (old: User[]) =>
        old?.map(user => user.id === updatedUser.id ? updatedUser : user)
      );
      
      // Update individual user cache
      queryClient.setQueryData(['user', updatedUser.id], updatedUser);
      
      toast.success('User updated successfully');
    },
    onError: (error) => {
      toast.error(`Failed to update user: ${error.message}`);
    },
  });
}
```

### Real-time Data Updates
```typescript
// hooks/useRealtimeMetrics.ts
export function useRealtimeMetrics() {
  const queryClient = useQueryClient();
  
  const { data: metrics } = useQuery({
    queryKey: ['metrics'],
    queryFn: adminApi.getMetrics,
    refetchInterval: 30000, // Refetch every 30 seconds
  });

  const socket = useWebSocket(true);

  useEffect(() => {
    if (!socket) return;

    socket.on('metricsUpdate', (newMetrics: Metrics) => {
      queryClient.setQueryData(['metrics'], newMetrics);
    });

    return () => {
      socket.off('metricsUpdate');
    };
  }, [socket, queryClient]);

  return metrics;
}
```

## Dashboard Components

### KPI Cards
```typescript
// components/dashboard/KPICard.tsx
interface KPICardProps {
  title: string;
  value: string | number;
  change: number;
  changeType: 'increase' | 'decrease' | 'neutral';
  icon: React.ComponentType<{ className?: string }>;
  loading?: boolean;
}

export function KPICard({ title, value, change, changeType, icon: Icon, loading }: KPICardProps) {
  const changeColor = {
    increase: 'text-green-600',
    decrease: 'text-red-600',
    neutral: 'text-gray-600',
  }[changeType];

  if (loading) {
    return <KPICardSkeleton />;
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow border">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900">{value}</p>
        </div>
        <Icon className="h-8 w-8 text-blue-600" />
      </div>
      <div className="mt-4 flex items-center">
        <span className={`text-sm font-medium ${changeColor}`}>
          {change > 0 ? '+' : ''}{change}%
        </span>
        <span className="text-sm text-gray-500 ml-1">vs last period</span>
      </div>
    </div>
  );
}
```

### Analytics Charts
```typescript
// components/charts/RevenueChart.tsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface RevenueChartProps {
  data: RevenueData[];
  height?: number;
}

export function RevenueChart({ data, height = 300 }: RevenueChartProps) {
  return (
    <div className="bg-white p-6 rounded-lg shadow border">
      <h3 className="text-lg font-semibold mb-4">Revenue Trend</h3>
      <ResponsiveContainer width="100%" height={height}>
        <LineChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis 
            dataKey="date" 
            tickFormatter={(value) => format(new Date(value), 'MMM dd')}
          />
          <YAxis 
            tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}
          />
          <Tooltip 
            labelFormatter={(value) => format(new Date(value), 'MMM dd, yyyy')}
            formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}
          />
          <Line 
            type="monotone" 
            dataKey="revenue" 
            stroke="#3B82F6" 
            strokeWidth={2}
            dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}
```

## User Management

### User List Component
```typescript
// components/users/UserList.tsx
export function UserList() {
  const [filters, setFilters] = useState<UserFilters>({});
  const { data: users, isLoading, error } = useUsers(filters);
  const updateUserMutation = useUserMutation();

  const columns: Column<User>[] = [
    {
      key: 'name',
      label: 'Name',
      className: 'flex-1 px-4',
      render: (user) => (
        <div className="flex items-center">
          <Avatar src={user.avatar} name={user.name} />
          <span className="ml-3 font-medium">{user.name}</span>
        </div>
      ),
    },
    {
      key: 'email',
      label: 'Email',
      className: 'flex-1 px-4',
    },
    {
      key: 'status',
      label: 'Status',
      className: 'w-32 px-4',
      render: (user) => (
        <Badge variant={user.status === 'active' ? 'success' : 'warning'}>
          {user.status}
        </Badge>
      ),
    },
    {
      key: 'actions',
      label: 'Actions',
      className: 'w-32 px-4',
      render: (user) => (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm">
              Actions
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem onClick={() => handleEditUser(user)}>
              Edit
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={() => handleToggleStatus(user)}
              className="text-red-600"
            >
              {user.status === 'active' ? 'Deactivate' : 'Activate'}
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      ),
    },
  ];

  const handleToggleStatus = async (user: User) => {
    const newStatus = user.status === 'active' ? 'inactive' : 'active';
    await updateUserMutation.mutateAsync({
      id: user.id,
      status: newStatus,
    });
  };

  if (error) {
    return <ErrorMessage message="Failed to load users" />;
  }

  return (
    <div className="space-y-4">
      <UserFilters filters={filters} onFiltersChange={setFilters} />
      <DataTable
        data={users || []}
        columns={columns}
        isLoading={isLoading}
        height={600}
      />
    </div>
  );
}
```

## System Monitoring

### Real-time System Metrics
```typescript
// components/monitoring/SystemMetrics.tsx
export function SystemMetrics() {
  const metrics = useRealtimeMetrics();
  
  const metricCards = [
    {
      title: 'Active Users',
      value: metrics?.activeUsers || 0,
      change: metrics?.activeUsersChange || 0,
      changeType: metrics?.activeUsersChange >= 0 ? 'increase' : 'decrease',
      icon: Users,
    },
    {
      title: 'Server CPU',
      value: `${metrics?.serverCpu || 0}%`,
      change: metrics?.serverCpuChange || 0,
      changeType: metrics?.serverCpuChange <= 0 ? 'increase' : 'decrease',
      icon: Cpu,
    },
    {
      title: 'Memory Usage',
      value: `${metrics?.memoryUsage || 0}%`,
      change: metrics?.memoryUsageChange || 0,
      changeType: metrics?.memoryUsageChange <= 0 ? 'increase' : 'decrease',
      icon: HardDrive,
    },
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {metricCards.map((metric) => (
        <KPICard key={metric.title} {...metric} />
      ))}
    </div>
  );
}
```

### Activity Feed
```typescript
// components/monitoring/ActivityFeed.tsx
export function ActivityFeed() {
  const { data: activities, isLoading } = useQuery({
    queryKey: ['activities'],
    queryFn: adminApi.getActivities,
    refetchInterval: 10000, // Refetch every 10 seconds
  });

  if (isLoading) {
    return <ActivityFeedSkeleton />;
  }

  return (
    <div className="bg-white rounded-lg shadow border">
      <div className="p-6 border-b">
        <h3 className="text-lg font-semibold">Recent Activity</h3>
      </div>
      <div className="divide-y">
        {activities?.map((activity) => (
          <div key={activity.id} className="p-4 hover:bg-gray-50">
            <div className="flex items-start space-x-3">
              <ActivityIcon type={activity.type} />
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-900">
                  <span className="font-medium">{activity.user}</span>
                  {' '}{activity.action}
                </p>
                <p className="text-xs text-gray-500">
                  {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
```

## Data Visualization

### Multi-Chart Dashboard
```typescript
// components/analytics/AnalyticsDashboard.tsx
export function AnalyticsDashboard() {
  const { data: analytics } = useQuery({
    queryKey: ['analytics'],
    queryFn: adminApi.getAnalytics,
  });

  if (!analytics) {
    return <AnalyticsSkeleton />;
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <RevenueChart data={analytics.revenue} />
      <UserGrowthChart data={analytics.userGrowth} />
      <TradeVolumeChart data={analytics.tradeVolume} />
      <GeographicDistribution data={analytics.geography} />
    </div>
  );
}
```

### Geographic Data Visualization
```typescript
// components/charts/GeographicMap.tsx
import { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';

interface GeographicMapProps {
  data: GeographicData[];
}

export function GeographicMap({ data }: GeographicMapProps) {
  return (
    <div className="bg-white p-6 rounded-lg shadow border">
      <h3 className="text-lg font-semibold mb-4">User Distribution</h3>
      <div className="h-96 rounded-lg overflow-hidden">
        <MapContainer
          center={[20, 0]}
          zoom={2}
          style={{ height: '100%', width: '100%' }}
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; OpenStreetMap contributors'
          />
          {data.map((location) => (
            <CircleMarker
              key={location.country}
              center={[location.lat, location.lng]}
              radius={Math.sqrt(location.users) * 2}
              fillColor="#3B82F6"
              color="#1E40AF"
              weight={2}
              fillOpacity={0.6}
            >
              <Popup>
                <div>
                  <strong>{location.country}</strong>
                  <br />
                  Users: {location.users.toLocaleString()}
                </div>
              </Popup>
            </CircleMarker>
          ))}
        </MapContainer>
      </div>
    </div>
  );
}
```

## Security & Permissions

### Admin Authentication
```typescript
// hooks/useAdminAuth.ts
export function useAdminAuth() {
  const [admin, setAdmin] = useState<Admin | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('adminToken');
    if (token) {
      adminApi.verifyToken(token)
        .then(setAdmin)
        .catch(() => {
          localStorage.removeItem('adminToken');
          window.location.href = '/login';
        })
        .finally(() => setIsLoading(false));
    } else {
      setIsLoading(false);
    }
  }, []);

  const login = async (credentials: LoginCredentials) => {
    const response = await adminApi.login(credentials);
    localStorage.setItem('adminToken', response.token);
    setAdmin(response.admin);
  };

  const logout = () => {
    localStorage.removeItem('adminToken');
    setAdmin(null);
    window.location.href = '/login';
  };

  return { admin, isLoading, login, logout };
}
```

### Permission-Based Components
```typescript
// components/auth/PermissionGate.tsx
interface PermissionGateProps {
  permission: string;
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export function PermissionGate({ permission, children, fallback }: PermissionGateProps) {
  const { admin } = useAdminAuth();
  
  const hasPermission = admin?.permissions.includes(permission) || admin?.role === 'super_admin';
  
  if (!hasPermission) {
    return fallback || null;
  }
  
  return <>{children}</>;
}

// Usage
<PermissionGate permission="users.delete">
  <Button variant="destructive" onClick={handleDeleteUser}>
    Delete User
  </Button>
</PermissionGate>
```

## Performance Optimization

### Large Dataset Handling
```typescript
// components/tables/VirtualizedTable.tsx
import { FixedSizeList as List } from 'react-window';

export function VirtualizedTable<T>({ data, columns, height = 600 }: VirtualizedTableProps<T>) {
  const Row = memo(({ index, style }: { index: number; style: React.CSSProperties }) => {
    const item = data[index];
    
    return (
      <div style={style} className="flex items-center border-b hover:bg-gray-50">
        {columns.map((column) => (
          <div key={column.key} className={column.className}>
            {column.render ? column.render(item) : item[column.key]}
          </div>
        ))}
      </div>
    );
  });

  return (
    <List
      height={height}
      itemCount={data.length}
      itemSize={50}
      width="100%"
    >
      {Row}
    </List>
  );
}
```

### Query Optimization
```typescript
// Implement infinite queries for large datasets
export function useInfiniteUsers(filters: UserFilters) {
  return useInfiniteQuery({
    queryKey: ['users', 'infinite', filters],
    queryFn: ({ pageParam = 0 }) => 
      adminApi.getUsers({ ...filters, page: pageParam, limit: 50 }),
    getNextPageParam: (lastPage) => 
      lastPage.hasNext ? lastPage.page + 1 : undefined,
  });
}
```

## Common Pitfalls to Avoid

- Don't show sensitive user data unnecessarily in admin views
- Don't skip admin action confirmations for destructive operations
- Don't ignore audit logging for admin actions
- Don't forget admin-specific error handling and fallbacks
- Don't skip admin permission checks on sensitive operations
- Don't load all data at once - use pagination and virtualization
- Don't forget to handle WebSocket disconnections in real-time features
- Don't ignore accessibility in admin interfaces
- Don't skip loading states for better UX
- Don't forget to validate admin inputs and sanitize data

## Emergency Procedures

### Admin Dashboard Issues
1. Check admin authentication status
2. Verify admin-specific API endpoints
3. Check real-time data connections
4. Monitor admin action logs
5. Verify database query performance

### Performance Issues
1. Monitor large dataset rendering performance
2. Check TanStack Query cache efficiency
3. Verify WebSocket connection stability
4. Monitor chart rendering performance
5. Check for memory leaks in long-running admin sessions

### Security Issues
1. Review admin permission assignments
2. Check audit logs for suspicious activity
3. Verify admin token expiration and rotation
4. Monitor failed admin login attempts
5. Ensure sensitive data is properly masked 