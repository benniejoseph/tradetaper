# TradeTaper Backend Cursor Rules

## Project Overview
NestJS API server with TypeORM, PostgreSQL, WebSockets, Google Cloud Storage, Stripe integration, and MetaTrader 5 connectivity.

## Technology Stack
- **Framework**: NestJS 11.x with TypeScript 5.7
- **Database**: PostgreSQL with TypeORM 0.3.24
- **Authentication**: JWT with Passport.js
- **File Storage**: Google Cloud Storage
- **WebSockets**: Socket.IO 4.8
- **Payment Processing**: Stripe 18.x
- **Trading Integration**: MetaAPI Cloud SDK
- **Validation**: class-validator & class-transformer
- **Testing**: Jest with Supertest

## Architecture Patterns

### Module Organization
```
src/
├── modules/           # Feature modules (auth, users, trades, strategies)
├── common/           # Shared utilities, guards, interceptors
├── database/         # Database configuration and migrations
├── config/          # Configuration modules
├── types/           # Global type definitions
└── seed/            # Database seeding
```

### Core Principles
- **Feature-based modules**: Each business domain gets its own module
- **Dependency injection**: Use NestJS DI container for all services
- **DTOs for validation**: All inputs/outputs must use DTOs with class-validator
- **Repository pattern**: Use TypeORM repositories, avoid query builders in services
- **Transaction management**: Use transactions for multi-step operations
- **Proper error handling**: Custom exceptions with appropriate HTTP status codes

## Code Standards

### Controllers
- Keep thin - delegate all business logic to services
- Use DTOs for request/response validation
- Implement proper HTTP status codes
- Add Swagger documentation decorators
- Use guards for authentication/authorization

```typescript
@Controller('api/v1/trades')
@UseGuards(JwtAuthGuard)
export class TradesController {
  @Post()
  @UsePipes(ValidationPipe)
  async create(@Body() createTradeDto: CreateTradeDto) {
    return this.tradesService.create(createTradeDto);
  }
}
```

### Services
- Contain all business logic
- Inject repositories and other services
- Handle transactions properly
- Throw meaningful exceptions
- Return consistent response formats

```typescript
@Injectable()
export class TradesService {
  constructor(
    @InjectRepository(Trade)
    private tradesRepository: Repository<Trade>,
  ) {}

  async create(createTradeDto: CreateTradeDto): Promise<Trade> {
    // Business logic here
  }
}
```

### DTOs
- Use class-validator decorators
- Include transformation rules
- Separate create/update DTOs
- Add Swagger API property decorators

```typescript
export class CreateTradeDto {
  @IsString()
  @IsNotEmpty()
  @ApiProperty()
  symbol: string;

  @IsNumber()
  @Min(0)
  @Transform(({ value }) => parseFloat(value))
  @ApiProperty()
  entryPrice: number;
}
```

### Entities
- Use TypeORM decorators properly
- Define relationships clearly
- Add indexes for performance
- Include audit fields (createdAt, updatedAt)

```typescript
@Entity('trades')
export class Trade {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ type: 'varchar', length: 20 })
  @Index()
  symbol: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}
```

## Database & Migrations

### Migration Guidelines
- Generate migrations for all schema changes: `npm run migration:generate`
- Review generated migrations before running
- Use descriptive migration names
- Test migrations in development first
- Never edit existing migrations in production

### Query Optimization
- Use proper indexes on frequently queried columns
- Implement pagination for list endpoints
- Use select queries to limit returned fields
- Avoid N+1 queries with proper relations

## API Design

### REST Conventions
- Use `/api/v1/` prefix for all endpoints
- Follow RESTful resource naming
- Implement proper HTTP methods (GET, POST, PUT, DELETE)
- Use appropriate status codes (200, 201, 400, 401, 403, 404, 500)
- Implement pagination with `page` and `limit` parameters

### Request/Response Format
```typescript
// List Response
{
  data: T[],
  pagination: {
    page: number,
    limit: number,
    total: number,
    totalPages: number
  }
}

// Error Response
{
  statusCode: number,
  message: string | string[],
  error: string,
  timestamp: string,
  path: string
}
```

## Security Best Practices

### Authentication & Authorization
- Use JWT tokens with proper expiration
- Implement refresh token rotation
- Hash passwords with bcrypt (cost factor 12)
- Validate user permissions for each endpoint
- Rate limit authentication endpoints

### Input Validation
- Validate all inputs with class-validator
- Sanitize string inputs to prevent XSS
- Validate file uploads (type, size, content)
- Use parameterized queries (TypeORM handles this)

### Environment Variables
- Never commit `.env` files
- Validate required environment variables on startup
- Use different configs for dev/staging/production
- Encrypt sensitive data in database

## WebSocket Implementation

### Gateway Structure
```typescript
@WebSocketGateway({
  cors: { origin: process.env.FRONTEND_URL },
  namespace: '/trades'
})
export class TradesGateway {
  @WebSocketServer()
  server: Server;

  @SubscribeMessage('joinRoom')
  handleJoinRoom(client: Socket, room: string) {
    client.join(room);
  }
}
```

### Real-time Features
- Authenticate WebSocket connections
- Use rooms for targeted messaging
- Handle connection/disconnection gracefully
- Emit trade updates to relevant users only

## File Upload & GCS Integration

### File Handling
- Validate file types and sizes
- Use multer for file uploads
- Store files in Google Cloud Storage
- Generate secure file URLs
- Clean up temporary files

```typescript
@Post('upload')
@UseInterceptors(FileInterceptor('file'))
async uploadFile(@UploadedFile() file: Express.Multer.File) {
  const fileUrl = await this.gcsService.uploadFile(file);
  return { url: fileUrl };
}
```

## Trading & MetaAPI Integration

### MetaTrader 5 Connection
- Handle MetaAPI authentication
- Implement proper error handling for trading operations
- Cache trading account data appropriately
- Validate trading symbols and parameters

### Data Synchronization
- Sync MT5 trades with local database
- Handle timezone conversions properly
- Implement retry logic for failed API calls
- Log all trading operations for audit

## Testing

### Unit Tests
- Test all service methods
- Mock external dependencies (database, APIs)
- Test edge cases and error conditions
- Aim for >80% code coverage

### Integration Tests
- Test complete API endpoints
- Use test database for integration tests
- Test authentication flows
- Test WebSocket connections

## Performance Optimization

### Database
- Use connection pooling (configured in TypeORM)
- Implement query optimization
- Add appropriate indexes
- Use caching for frequently accessed data

### API Response Times
- Monitor endpoint performance
- Implement response caching where appropriate
- Use compression middleware
- Optimize heavy computations

## Deployment (Google Cloud Run)

### Docker Configuration
- Use multi-stage builds for optimization
- Configure proper health checks on `/health`
- Set appropriate memory and CPU limits
- Use Cloud SQL proxy for database connections

### Environment Configuration
- Port 8080 (required for Cloud Run)
- Configure DATABASE_URL for Cloud SQL
- Set up Google Cloud Storage credentials
- Configure CORS for frontend domains

### Monitoring & Logging
- Use structured logging with appropriate levels
- Monitor application metrics
- Set up error tracking (Sentry recommended)
- Monitor database performance

## Common Pitfalls to Avoid

- Don't expose internal database IDs in APIs
- Don't forget to validate file uploads properly
- Don't skip transaction rollbacks on errors
- Don't hardcode configuration values
- Don't ignore database connection pooling
- Don't forget to handle WebSocket disconnections
- Don't expose sensitive data in error messages
- Don't skip input sanitization
- Don't use `any` type in TypeScript
- Don't forget to add proper indexes for queries

## Emergency Procedures

### Application Issues
1. Check Cloud Run logs: `gcloud logging read`
2. Verify database connectivity
3. Check MetaAPI service status
4. Monitor memory and CPU usage
5. Rollback deployment if necessary

### Database Issues
1. Check Cloud SQL instance status
2. Verify connection pool settings
3. Check for slow queries
4. Monitor disk space usage
5. Review recent migrations

### External Service Issues
1. Check Stripe dashboard for payment issues
2. Verify MetaAPI connectivity
3. Check Google Cloud Storage access
4. Monitor third-party service status pages
5. Implement fallback mechanisms where possible 