# TradeTaper Frontend Cursor Rules

## Project Overview
Next.js 15 trading journal application with Redux Toolkit, real-time WebSocket features, chart visualizations, and Stripe payment integration.

## Technology Stack
- **Framework**: Next.js 15.3 with App Router and React 19
- **State Management**: Redux Toolkit 2.8 with React Redux 9.2
- **Styling**: Tailwind CSS 3.4 with PostCSS
- **Charts**: Lightweight Charts 5.0 for trading visualizations
- **Forms**: React Hook Form with validation
- **HTTP Client**: Axios 1.10
- **WebSockets**: Socket.IO Client 4.8
- **Payment**: Stripe React components
- **Icons**: Lucide React + React Icons
- **Date Handling**: date-fns 4.1

## Architecture Patterns

### App Router Structure
```
src/
├── app/                    # Next.js App Router
│   ├── (app)/             # Authenticated app routes
│   ├── (auth)/            # Authentication routes
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # Reusable UI components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   ├── charts/           # Trading chart components
│   └── dashboard/        # Dashboard-specific components
├── store/                # Redux store and slices
├── hooks/                # Custom React hooks
├── services/             # API service functions
├── utils/                # Utility functions
├── types/                # TypeScript type definitions
└── lib/                  # Third-party configurations
```

### Core Principles
- **Server Components First**: Use Server Components by default, Client Components only when needed
- **Progressive Enhancement**: Build with accessibility and performance in mind
- **Type Safety**: Strict TypeScript usage throughout
- **Component Composition**: Favor composition over inheritance
- **State Management**: Global state in Redux, local state with useState
- **Performance**: Optimize for Core Web Vitals

## Component Guidelines

### Server vs Client Components
```typescript
// Server Component (default)
async function TradingDashboard() {
  const trades = await fetchTrades(); // Server-side data fetching
  return <TradesList trades={trades} />;
}

// Client Component (when needed)
'use client';
function InteractiveChart() {
  const [data, setData] = useState([]);
  // Interactive logic here
}
```

### Component Structure
```typescript
interface ComponentProps {
  title: string;
  data: TradeData[];
  onAction?: (id: string) => void;
}

export function Component({ title, data, onAction }: ComponentProps) {
  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      {/* Component content */}
    </div>
  );
}
```

### TypeScript Standards
- Define interfaces for all props and data structures
- Use union types for specific values
- Avoid `any` type - use `unknown` instead
- Export interfaces that might be reused
- Use generic types for reusable components

## State Management

### Redux Store Structure
```typescript
// store/index.ts
export const store = configureStore({
  reducer: {
    auth: authSlice.reducer,
    trades: tradesSlice.reducer,
    strategies: strategiesSlice.reducer,
    ui: uiSlice.reducer,
  },
});

// store/slices/tradesSlice.ts
const tradesSlice = createSlice({
  name: 'trades',
  initialState,
  reducers: {
    addTrade: (state, action) => {
      state.trades.push(action.payload);
    },
  },
  extraReducers: (builder) => {
    builder.addCase(fetchTrades.fulfilled, (state, action) => {
      state.trades = action.payload;
    });
  },
});
```

### Async Actions
```typescript
export const fetchTrades = createAsyncThunk(
  'trades/fetchTrades',
  async (params: FetchTradesParams, { rejectWithValue }) => {
    try {
      const response = await tradesService.getTrades(params);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);
```

### Local State Guidelines
- Use `useState` for component-local state
- Use `useReducer` for complex local state logic
- Prefer controlled components for forms
- Lift state up when multiple components need it

## API Integration

### Service Layer
```typescript
// services/api.ts
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://tradetaper-backend-481634875325.us-central1.run.app'
  : 'http://localhost:8080';

const api = axios.create({
  baseURL: `${API_BASE_URL}/api/v1`,
  timeout: 10000,
});

// services/tradesService.ts
export const tradesService = {
  async getTrades(params: GetTradesParams): Promise<ApiResponse<Trade[]>> {
    const response = await api.get('/trades', { params });
    return response.data;
  },
  
  async createTrade(trade: CreateTradeData): Promise<ApiResponse<Trade>> {
    const response = await api.post('/trades', trade);
    return response.data;
  },
};
```

### Error Handling
```typescript
// Global error interceptor
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle authentication errors
      store.dispatch(logout());
    }
    return Promise.reject(error);
  }
);
```

## Form Handling

### React Hook Form Integration
```typescript
interface TradeFormData {
  symbol: string;
  entryPrice: number;
  exitPrice?: number;
  quantity: number;
  type: 'BUY' | 'SELL';
}

function TradeForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    setValue,
  } = useForm<TradeFormData>();

  const onSubmit = async (data: TradeFormData) => {
    try {
      await tradesService.createTrade(data);
      toast.success('Trade created successfully');
    } catch (error) {
      toast.error('Failed to create trade');
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <input
        {...register('symbol', { required: 'Symbol is required' })}
        placeholder="Symbol"
        className="w-full p-2 border rounded"
      />
      {errors.symbol && (
        <span className="text-red-500 text-sm">{errors.symbol.message}</span>
      )}
    </form>
  );
}
```

### Date Handling
```typescript
// Always format dates as ISO 8601 for API
const formatDateForAPI = (date: Date): string => {
  return date.toISOString();
};

// Transform frontend data to API format
const transformFrontendToApiPayload = (data: FrontendTradeData): ApiTradeData => {
  return {
    ...data,
    entryTime: formatDateForAPI(data.entryTime),
    exitTime: data.exitTime ? formatDateForAPI(data.exitTime) : null,
  };
};
```

## Trading Chart Implementation

### Lightweight Charts Setup
```typescript
'use client';
import { createChart, IChartApi } from 'lightweight-charts';

function TradingChart({ data }: { data: CandlestickData[] }) {
  const chartRef = useRef<HTMLDivElement>(null);
  const chart = useRef<IChartApi | null>(null);

  useEffect(() => {
    if (!chartRef.current) return;

    chart.current = createChart(chartRef.current, {
      width: chartRef.current.clientWidth,
      height: 400,
      layout: {
        background: { color: '#ffffff' },
        textColor: '#333333',
      },
    });

    const candlestickSeries = chart.current.addCandlestickSeries();
    candlestickSeries.setData(data);

    return () => {
      chart.current?.remove();
    };
  }, [data]);

  return <div ref={chartRef} className="w-full h-96" />;
}
```

## WebSocket Integration

### Real-time Updates
```typescript
// hooks/useWebSocket.ts
export function useWebSocket(enabled: boolean = false) {
  const [socket, setSocket] = useState<Socket | null>(null);
  const dispatch = useAppDispatch();

  useEffect(() => {
    if (!enabled) return;

    const newSocket = io(`${API_BASE_URL}/trades`, {
      auth: { token: localStorage.getItem('token') },
    });

    newSocket.on('tradeUpdate', (trade: Trade) => {
      dispatch(updateTrade(trade));
    });

    setSocket(newSocket);

    return () => {
      newSocket.close();
    };
  }, [enabled, dispatch]);

  return socket;
}
```

## Styling Guidelines

### Tailwind CSS Best Practices
```typescript
// Use consistent spacing scale
const spacing = {
  xs: 'p-2',
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
};

// Component with Tailwind classes
function Card({ children, variant = 'default' }: CardProps) {
  const baseClasses = 'rounded-lg shadow-md transition-shadow';
  const variantClasses = {
    default: 'bg-white border border-gray-200',
    primary: 'bg-blue-50 border border-blue-200',
    success: 'bg-green-50 border border-green-200',
  };

  return (
    <div className={`${baseClasses} ${variantClasses[variant]}`}>
      {children}
    </div>
  );
}
```

### Responsive Design
```typescript
// Mobile-first responsive classes
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Content */}
</div>

// Conditional rendering for mobile
const isMobile = useMediaQuery('(max-width: 768px)');
```

## Performance Optimization

### Code Splitting
```typescript
// Dynamic imports for large components
const TradingChart = dynamic(() => import('./TradingChart'), {
  loading: () => <ChartSkeleton />,
  ssr: false, // Disable SSR for client-side only components
});
```

### Memoization
```typescript
// Memoize expensive calculations
const calculatedMetrics = useMemo(() => {
  return calculateTradingMetrics(trades);
}, [trades]);

// Memoize callback functions
const handleTradeUpdate = useCallback((tradeId: string, updates: Partial<Trade>) => {
  dispatch(updateTrade({ id: tradeId, updates }));
}, [dispatch]);
```

### Image Optimization
```typescript
import Image from 'next/image';

function ProfileImage({ src, alt }: { src: string; alt: string }) {
  return (
    <Image
      src={src}
      alt={alt}
      width={200}
      height={200}
      className="rounded-full"
      priority // For above-the-fold images
    />
  );
}
```

## Security Best Practices

### Environment Variables
```typescript
// Use NEXT_PUBLIC_ prefix for client-side variables
const publicConfig = {
  apiUrl: process.env.NEXT_PUBLIC_API_URL,
  stripeKey: process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,
};

// Server-side only variables (no prefix)
const serverConfig = {
  secretKey: process.env.SECRET_KEY, // Only available on server
};
```

### Input Sanitization
```typescript
import DOMPurify from 'isomorphic-dompurify';

// Sanitize HTML content
const sanitizedContent = DOMPurify.sanitize(userInput);
```

### Token Management
```typescript
// Secure token storage and management
const tokenManager = {
  getToken: () => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('authToken');
    }
    return null;
  },
  
  setToken: (token: string) => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('authToken', token);
    }
  },
  
  removeToken: () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('authToken');
    }
  },
};
```

## Testing Guidelines

### Component Testing
```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { store } from '../store';

function renderWithProviders(component: React.ReactElement) {
  return render(
    <Provider store={store}>
      {component}
    </Provider>
  );
}

test('should create trade when form is submitted', async () => {
  renderWithProviders(<TradeForm />);
  
  fireEvent.change(screen.getByPlaceholderText('Symbol'), {
    target: { value: 'EURUSD' },
  });
  
  fireEvent.click(screen.getByText('Create Trade'));
  
  expect(await screen.findByText('Trade created successfully')).toBeInTheDocument();
});
```

## Deployment (Vercel)

### Build Configuration
```typescript
// next.config.ts
const nextConfig = {
  experimental: {
    optimizePackageImports: ['lightweight-charts'],
  },
  images: {
    domains: ['storage.googleapis.com'],
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
};
```

### Environment Variables
- Set production API URL in Vercel dashboard
- Configure Stripe publishable key
- Set up any other client-side environment variables

## Common Pitfalls to Avoid

- Don't use `useEffect` for derived state
- Don't forget to handle loading states in async operations
- Don't skip error boundaries for better error handling
- Don't ignore accessibility (use semantic HTML and ARIA attributes)
- Don't bundle server-only code in client components
- Don't forget to validate and format dates properly for API calls
- Don't use `any` type - prefer `unknown` and proper type guards
- Don't skip prop validation with TypeScript interfaces
- Don't ignore performance - monitor Core Web Vitals
- Don't forget to handle WebSocket disconnections gracefully

## Emergency Procedures

### Frontend Issues
1. Check browser console for JavaScript errors
2. Verify API connectivity and network requests
3. Check Redux DevTools for state issues
4. Verify environment variables are set correctly
5. Check Vercel deployment logs

### Performance Issues
1. Use React DevTools Profiler to identify slow components
2. Check bundle analyzer for large dependencies
3. Monitor Core Web Vitals in production
4. Verify image optimization is working
5. Check for memory leaks in long-running components 